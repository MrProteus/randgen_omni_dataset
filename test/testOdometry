#! /usr/bin/env python

import rospy
from randgen_omni_dataset import odometry
import unittest
import threading

LOG_LEVEL = rospy.DEBUG
INIT_SEED = None
MSG_TYPE = odometry.odometryMsgType
TOPIC = '/omni1/odometry'
FREQ = 33


def odometry_callback(data):
    rospy.loginfo('New msg at time %s' % data.header.stamp)


def change_states():
    odom.change_state('WalkForward')
    odom.change_state('Rotate')
    odom.change_state('Rotate')


def rng():
    print 'RNG = %f' % odom.get_rand_type('x')
    print 'RNG = %f' % odom.get_rand_type('y')
    print 'RNG for all variables'
    print odom.get_rand_all()
    print odom.get_rand_all()


class OdometryTestCases(unittest.TestCase):
    def test_states(self):
        change_states()
        with self.assertRaises(KeyError):
            val = odom.change_state('NotValid')
            print val

        self.assertEqual(odom.get_state(), odom.stateTypes['Rotate'])

    def test_rng(self):
        rng()
        with self.assertRaises(KeyError):
            odom.get_rand_type('z')

if __name__ == '__main__':
    rospy.init_node('test_odometry', log_level=LOG_LEVEL)

    # Odometry object
    odom = odometry.Odometry(INIT_SEED, TOPIC, FREQ)

    # Run our tests
    test_thread = threading.Thread(target=unittest.main)
    test_thread.start()

    # Odometry loop thread and start
    odometry_thread = threading.Thread(target=odom.loop)
    odometry_thread.setDaemon(True)
    odometry_thread.start()

    # Subscriber to topic
    sub = rospy.Subscriber(TOPIC, MSG_TYPE, callback=odometry_callback, queue_size=1)

    # Wait for Ctrl+C, after this all daemon threads will be stopped
    rospy.spin()